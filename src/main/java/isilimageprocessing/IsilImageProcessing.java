/*
 * TestCImage2.java
 *
 * Created on 10 juillet 2007, 16:50
 */

package isilimageprocessing;

import cimage.*;
import cimage.exceptions.*;
import cimage.observers.*;
import cimage.observers.events.*;
import imageprocessing.Complexe.MatriceComplexe;
import imageprocessing.Fourier.Fourier;
import imageprocessing.Histogramme.Histogramme;
import isilimageprocessing.dialogues.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.*;
import javax.swing.*;

import isilimageprocessing.dialogues.Applications.*;
import isilimageprocessing.dialogues.Histogramme.*;
import isilimageprocessing.dialogues.Contours.Lineaire.JDialogAfficheLaplace4;
import isilimageprocessing.dialogues.Contours.Lineaire.JDialogAfficheLaplace8;
import isilimageprocessing.dialogues.Contours.Lineaire.JDialogAffichePrewitt;
import isilimageprocessing.dialogues.Contours.Lineaire.JDialogAfficheSobel;
import isilimageprocessing.dialogues.Contours.NonLineaire.JDialogAfficheGradBeucher;
import isilimageprocessing.dialogues.Contours.NonLineaire.JDialogAfficheGradDilatation;
import isilimageprocessing.dialogues.Contours.NonLineaire.JDialogAfficheGradErosion;
import isilimageprocessing.dialogues.Contours.NonLineaire.JDialogAfficheLaplaceNonLin;
import isilimageprocessing.dialogues.Lineaire.Global.JDialogAffichePBBWGlobal;
import isilimageprocessing.dialogues.Lineaire.Global.JDialogAffichePBIGlobal;
import isilimageprocessing.dialogues.Lineaire.Global.JDialogAffichePHBWGlobal;
import isilimageprocessing.dialogues.Lineaire.Global.JDialogAffichePHIGlobal;
import isilimageprocessing.dialogues.Lineaire.Local.JDialogAfficheMCLocal;
import isilimageprocessing.dialogues.Lineaire.Local.JDialogAfficheMYLocal;
import isilimageprocessing.dialogues.NonLinear.Complex.JDialogDilatationGeodesique;
import isilimageprocessing.dialogues.NonLinear.Complex.JDialogFiltreMedian;
import isilimageprocessing.dialogues.NonLinear.Complex.JDialogReconstructionGeodesique;
import isilimageprocessing.dialogues.NonLinear.Elementary.JDialogAfficheDilatation;
import isilimageprocessing.dialogues.NonLinear.Elementary.JDialogAfficheErosion;
import isilimageprocessing.dialogues.NonLinear.Elementary.JDialogAfficheFermeture;
import isilimageprocessing.dialogues.NonLinear.Elementary.JDialogAfficheOuverture;
import isilimageprocessing.dialogues.Seuillage.JDialogAfficheSeuilAuto;
import isilimageprocessing.dialogues.Seuillage.JDialogAfficheSeuilDouble;
import isilimageprocessing.dialogues.Seuillage.JDialogAfficheSeuilSimple;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author  HP_Propri�taire
 */
public class IsilImageProcessing extends javax.swing.JFrame implements ClicListener,SelectLigneListener,SelectRectListener,SelectRectFillListener,SelectCercleListener,SelectCercleFillListener
{
    private CImageRGB imageRGB;
    private CImageNG  imageNG;

    private JLabelBeanCImage observer;
    private Color couleurPinceauRGB;
    private int   couleurPinceauNG;
    
    /** Creates new form TestCImage2 */
    public IsilImageProcessing() 
    {
        initComponents();
        
        imageRGB = null;
        imageNG  = null;
        
        observer = new JLabelBeanCImage();
        observer.addClicListener(this);
        observer.addSelectLigneListener(this);
        observer.addSelectRectListener(this);
        observer.addSelectRectFillListener(this);
        observer.addSelectCercleListener(this);
        observer.addSelectCercleFillListener(this);
        observer.setMode(JLabelBeanCImage.INACTIF);
        jScrollPane.setViewportView(observer);
        
        jMenuDessiner.setEnabled(false);
        jMenuFourier.setEnabled(false);
        jMenuHistogramme.setEnabled(false);
        jMenuLineaire.setEnabled(false);
        jMenuApplications.setEnabled(true);
        
        couleurPinceauRGB = Color.BLACK;
        couleurPinceauNG = 0;

        // NON-LINEAR
        jMenuNonLineaire.setEnabled(false);
        jMenuContour.setEnabled(false);
        jMenuSeuillage.setEnabled(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        buttonGroupDessiner = new javax.swing.ButtonGroup();
        jScrollPane = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuImage = new javax.swing.JMenu();
        jMenuNouvelle = new javax.swing.JMenu();
        jMenuItemNouvelleRGB = new javax.swing.JMenuItem();
        jMenuItemNouvelleNG = new javax.swing.JMenuItem();
        jMenuOuvrir = new javax.swing.JMenu();
        jMenuItemOuvrirRGB = new javax.swing.JMenuItem();
        jMenuItemOuvrirNG = new javax.swing.JMenuItem();
        jMenuItemEnregistrerSous = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuQuitter = new javax.swing.JMenuItem();
        jMenuDessiner = new javax.swing.JMenu();
        jMenuItemCouleurPinceau = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jCheckBoxMenuItemDessinerPixel = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerLigne = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerRectangle = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerRectanglePlein = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerCercle = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerCerclePlein = new javax.swing.JCheckBoxMenuItem();
        jMenuFourier = new javax.swing.JMenu();
        jMenuFourierAfficher = new javax.swing.JMenu();
        jMenuItemFourierAfficherModule = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPhase = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPartieReelle = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPartieImaginaire = new javax.swing.JMenuItem();
        jMenuHistogramme = new javax.swing.JMenu();
        jMenuHistogrammeAfficher = new javax.swing.JMenuItem();
        jMenuHistogrammeParametres = new JMenuItem();
        jMenuHistogrammeRehaussementLineaireSaturation = new JMenuItem();
        jMenuHistogrammeRehaussementGamma = new JMenuItem();
        jMenuHistogrammeRehaussementNegatif = new JMenuItem();
        jMenuHistogrammeRehaussementEgalisation = new JMenuItem();


        /* Filtrage Linéaire Global */
        jMenuLineaire = new JMenu();
        jMenuLineaire.setText("Lineaire");
        jMenuBar1.add(jMenuLineaire);

        jMenuGlobal = new JMenu();
        jMenuGlobal.setText("Global");
        jMenuLineaire.add(jMenuGlobal);

        jMenuItemPBIGlobal = new JMenuItem();
        jMenuItemPBIGlobal.setText("Passe-bas ideal");
        jMenuItemPBIGlobal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPBIGlobalActionPerformed(evt);
            }
        });
        jMenuGlobal.add(jMenuItemPBIGlobal);

        jMenuItemPHIGlobal = new JMenuItem();
        jMenuItemPHIGlobal.setText("Passe-haut ideal");
        jMenuItemPHIGlobal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPHIGlobalActionPerformed(evt);
            }
        });
        jMenuGlobal.add(jMenuItemPHIGlobal);

        jMenuItemPBBWGlobal = new JMenuItem();
        jMenuItemPBBWGlobal.setText("Passe-bas Butterworth");
        jMenuItemPBBWGlobal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPBBWGlobalActionPerformed(evt);
            }
        });
        jMenuGlobal.add(jMenuItemPBBWGlobal);

        jMenuItemPHBWGlobal = new JMenuItem();
        jMenuItemPHBWGlobal.setText("Passe-haut Butterworth");
        jMenuItemPHBWGlobal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPHBWGlobalActionPerformed(evt);
            }
        });
        jMenuGlobal.add(jMenuItemPHBWGlobal);

        /* Filtrage Linéaire Local */
        jMenuLocal = new JMenu();
        jMenuLocal.setText("Local");
        jMenuLineaire.add(jMenuLocal);

        jMenuItemMCLocal = new JMenuItem();
        jMenuItemMCLocal.setText("Masque de convolution");
        jMenuItemMCLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMCLocalActionPerformed(evt);
            }
        });
        jMenuLocal.add(jMenuItemMCLocal);

        jMenuItemMYLocal = new JMenuItem();
        jMenuItemMYLocal.setText("Moyenneur");
        jMenuItemMYLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMYLocalActionPerformed(evt);
            }
        });
        jMenuLocal.add(jMenuItemMYLocal);
        
        // NON-LINEAR
        jMenuNonLineaire = new JMenu();
        jMenuNonLineaire.setText("Non Lineaire");
        jMenuBar1.add(jMenuNonLineaire);
        jMenuElementaire = new JMenu();
        jMenuElementaire.setText("Elementaire");
        jMenuComplexe = new JMenu();
        jMenuComplexe.setText("Complexe");
        jMenuNonLineaire.add(jMenuElementaire);
        jMenuNonLineaire.add(jMenuComplexe);

        // Erosion
        jMenuItemErosion = new JMenuItem();
        jMenuItemErosion.setText("Erosion");
        jMenuItemErosion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemErosionActionPerformed(evt);
            }
        });
        jMenuElementaire.add(jMenuItemErosion);

        // Dilatation
        jMenuItemDilatation = new JMenuItem();
        jMenuItemDilatation.setText("Dilatation");
        jMenuItemDilatation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDilatationActionPerformed(evt);
            }
        });
        jMenuElementaire.add(jMenuItemDilatation);

        // Ouverture
        jMenuItemOuverture = new JMenuItem();
        jMenuItemOuverture.setText("Ouverture");
        jMenuItemOuverture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvertureActionPerformed(evt);
            }
        });
        jMenuElementaire.add(jMenuItemOuverture);

        // Fermeture
        jMenuItemFermeture = new JMenuItem();
        jMenuItemFermeture.setText("Fermeture");
        jMenuItemFermeture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFermetureActionPerformed(evt);
            }
        });
        jMenuElementaire.add(jMenuItemFermeture);

        // Dilatation Geodesique
        jMenuItemDilatationGeodesique = new JMenuItem();
        jMenuItemDilatationGeodesique.setText("Dilatation Geodesique");
        jMenuItemDilatationGeodesique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDilatationGeodesiqueActionPerformed(evt);
            }
        });
        jMenuComplexe.add(jMenuItemDilatationGeodesique);

        // Reconstruction Geodesique
        jMenuItemReconstructionGeodesique = new JMenuItem();
        jMenuItemReconstructionGeodesique.setText("Reconstruction Geodesique");
        jMenuItemReconstructionGeodesique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemReconstructionGeodesiqueActionPerformed(evt);
            }
        });
        jMenuComplexe.add(jMenuItemReconstructionGeodesique);

        // Filtre Median
        jMenuItemFiltreMedian = new JMenuItem();
        jMenuItemFiltreMedian.setText("Filtre Median");
        jMenuItemFiltreMedian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltreMedianActionPerformed(evt);
            }
        });
        jMenuComplexe.add(jMenuItemFiltreMedian);

        // Contours
        jMenuContour = new JMenu();
        jMenuContour.setText("Contours");
        jMenuBar1.add(jMenuContour);
        jMenuContourLineaire = new JMenu();
        jMenuContourLineaire.setText("Lineaire");
        jMenuContourNonLineaire = new JMenu();
        jMenuContourNonLineaire.setText("Non-Lineaire");
        jMenuContour.add(jMenuContourLineaire);
        jMenuContour.add(jMenuContourNonLineaire);
        jMenuItemPrewitt = new JMenuItem();
        jMenuItemSobel = new JMenuItem();
        jMenuItemLaplace4 = new JMenuItem();
        jMenuItemLaplace8 = new JMenuItem();
        jMenuItemGradErosion = new JMenuItem();
        jMenuItemGradDilatation = new JMenuItem();
        jMenuItemGradBeucher = new JMenuItem();
        jMenuItemLaplaceNonLin = new JMenuItem();
        jMenuContourLineaire.add(jMenuItemPrewitt);
        jMenuContourLineaire.add(jMenuItemSobel);
        jMenuContourLineaire.add(jMenuItemLaplace4);
        jMenuContourLineaire.add(jMenuItemLaplace8);
        jMenuContourNonLineaire.add(jMenuItemGradErosion);
        jMenuContourNonLineaire.add(jMenuItemGradDilatation);
        jMenuContourNonLineaire.add(jMenuItemGradBeucher);
        jMenuContourNonLineaire.add(jMenuItemLaplaceNonLin);

        jMenuItemPrewitt.setText("Prewitt");
        jMenuItemSobel.setText("Sobel");
        jMenuItemLaplace4.setText("Laplace 4");
        jMenuItemLaplace8.setText("Laplace 8");
        jMenuItemGradErosion.setText("Gradient d'erosion");
        jMenuItemGradDilatation.setText("Gradient de dilatation");
        jMenuItemGradBeucher.setText("Gradient de Beucher");
        jMenuItemLaplaceNonLin.setText("Laplacien non lineaire");
        jMenuItemPrewitt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPrewitt(evt);
            }
        });
        jMenuItemSobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSobel(evt);
            }
        });
        jMenuItemLaplace4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLaplace4(evt);
            }
        });
        jMenuItemLaplace8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLaplace8(evt);
            }
        });
        jMenuItemGradErosion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGradErosion(evt);
            }
        });
        jMenuItemGradDilatation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGradDilatation(evt);
            }
        });
        jMenuItemGradBeucher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGradBeucher(evt);
            }
        });
        jMenuItemLaplaceNonLin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLaplaceNonLin(evt);
            }
        });

        // Seuillage
        jMenuSeuillage = new JMenu();
        jMenuSeuillage.setText("Seuillage");
        jMenuBar1.add(jMenuSeuillage);
        jMenuItemSeuiSimple = new JMenuItem();
        jMenuItemSeuiDouble = new JMenuItem();
        jMenuItemSeuiAuto = new JMenuItem();
        jMenuSeuillage.add(jMenuItemSeuiSimple);
        jMenuSeuillage.add(jMenuItemSeuiDouble);
        jMenuSeuillage.add(jMenuItemSeuiAuto);

        jMenuItemSeuiSimple.setText("Seuillage Simple");
        jMenuItemSeuiDouble.setText("Seuillage Double");
        jMenuItemSeuiAuto.setText("Seuillage Automatique");

        jMenuItemSeuiSimple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSeuiSimple(evt);
            }
        });
        jMenuItemSeuiDouble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSeuiDouble(evt);
            }
        });
        jMenuItemSeuiAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSeuiAuto(evt);
            }
        });


        /*APPLICATIONS*/
        jMenuApplications = new JMenu();
        jMenuApplications.setText("Applications");
        jMenuBar1.add(jMenuApplications);
        jMenuItemLenaBruit = new JMenuItem();
        jMenuItemLenaAEgaliser = new JMenuItem();
        jMenuItemPetitsPois = new JMenuItem();
        jMenuItemBalanes = new JMenuItem();
        jMenuItemTools = new JMenuItem();
        jMenuItemVaisseaux = new JMenuItem();
        jMenuItemTartines = new JMenuItem();
        jMenuApplications.add(jMenuItemLenaBruit);
        jMenuApplications.add(jMenuItemLenaAEgaliser);
        jMenuApplications.add(jMenuItemPetitsPois);
        jMenuApplications.add(jMenuItemBalanes);
        jMenuApplications.add(jMenuItemTools);
        jMenuApplications.add(jMenuItemVaisseaux);
        jMenuApplications.add(jMenuItemTartines);
        jMenuItemLenaBruit.setText("Lena Bruit");
        jMenuItemLenaAEgaliser.setText("Lena a Egaliser");
        jMenuItemPetitsPois.setText("Petits pois");
        jMenuItemBalanes.setText("Balanes");
        jMenuItemTools.setText("Tools");
        jMenuItemVaisseaux.setText("Vaisseaux");
        jMenuItemTartines.setText("Tartines");

        jMenuItemLenaBruit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLenaBruit(evt);
            }
        });
        jMenuItemLenaAEgaliser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLenaAEgaliser(evt);
            }
        });
        jMenuItemPetitsPois.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPetitsPois(evt);
            }
        });
        jMenuItemBalanes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBalanes(evt);
            }
        });
        jMenuItemTools.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTools(evt);
            }
        });
        jMenuItemVaisseaux.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemVaisseaux(evt);
            }
        });
        jMenuItemTartines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTartines(evt);
            }
        });


        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Image Processing");

        jMenuImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/Net 13_p1.jpg")));
        jMenuImage.setText("Image");
        jMenuNouvelle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/File 65_p3.jpg")));
        jMenuNouvelle.setText("Nouvelle");
        jMenuItemNouvelleRGB.setText("Image RGB");
        jMenuItemNouvelleRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNouvelleRGBActionPerformed(evt);
            }
        });

        jMenuNouvelle.add(jMenuItemNouvelleRGB);

        jMenuItemNouvelleNG.setText("Image NG");
        jMenuItemNouvelleNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNouvelleNGActionPerformed(evt);
            }
        });

        jMenuNouvelle.add(jMenuItemNouvelleNG);

        jMenuImage.add(jMenuNouvelle);

        jMenuOuvrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/Folder 036_p3.jpg")));
        jMenuOuvrir.setText("Ouvrir");
        jMenuItemOuvrirRGB.setText("Image RGB");
        jMenuItemOuvrirRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvrirRGBActionPerformed(evt);
            }
        });

        jMenuOuvrir.add(jMenuItemOuvrirRGB);

        jMenuItemOuvrirNG.setText("Image NG");
        jMenuItemOuvrirNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvrirNGActionPerformed(evt);
            }
        });

        jMenuOuvrir.add(jMenuItemOuvrirNG);

        jMenuImage.add(jMenuOuvrir);

        jMenuItemEnregistrerSous.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/DD 27_p3.jpg")));
        jMenuItemEnregistrerSous.setText("Enregistrer sous...");
        jMenuItemEnregistrerSous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEnregistrerSousActionPerformed(evt);
            }
        });

        jMenuImage.add(jMenuItemEnregistrerSous);

        jMenuImage.add(jSeparator1);

        jMenuQuitter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/CP 59_p3.jpg")));
        jMenuQuitter.setText("Quitter");
        jMenuQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuQuitterActionPerformed(evt);
            }
        });

        jMenuImage.add(jMenuQuitter);

        jMenuBar1.add(jMenuImage);

        jMenuDessiner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/Display 28_p1.jpg")));
        jMenuDessiner.setText("Dessiner");
        jMenuItemCouleurPinceau.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/Display 14_p3.jpg")));
        jMenuItemCouleurPinceau.setText("Couleur");
        jMenuItemCouleurPinceau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCouleurPinceauActionPerformed(evt);
            }
        });

        jMenuDessiner.add(jMenuItemCouleurPinceau);

        jMenuDessiner.add(jSeparator2);

        jCheckBoxMenuItemDessinerPixel.setText("Pixel");
        jCheckBoxMenuItemDessinerPixel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerPixelActionPerformed(evt);
            }
        });

        jMenuDessiner.add(jCheckBoxMenuItemDessinerPixel);

        jCheckBoxMenuItemDessinerLigne.setText("Ligne");
        jCheckBoxMenuItemDessinerLigne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerLigneActionPerformed(evt);
            }
        });

        jMenuDessiner.add(jCheckBoxMenuItemDessinerLigne);

        jCheckBoxMenuItemDessinerRectangle.setText("Rectangle");
        jCheckBoxMenuItemDessinerRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerRectangleActionPerformed(evt);
            }
        });

        jMenuDessiner.add(jCheckBoxMenuItemDessinerRectangle);

        jCheckBoxMenuItemDessinerRectanglePlein.setText("Rectangle plein");
        jCheckBoxMenuItemDessinerRectanglePlein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerRectanglePleinActionPerformed(evt);
            }
        });

        jMenuDessiner.add(jCheckBoxMenuItemDessinerRectanglePlein);

        jCheckBoxMenuItemDessinerCercle.setText("Cercle");
        jCheckBoxMenuItemDessinerCercle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerCercleActionPerformed(evt);
            }
        });

        jMenuDessiner.add(jCheckBoxMenuItemDessinerCercle);

        jCheckBoxMenuItemDessinerCerclePlein.setText("Cercle plein");
        jCheckBoxMenuItemDessinerCerclePlein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerCerclePleinActionPerformed(evt);
            }
        });

        jMenuDessiner.add(jCheckBoxMenuItemDessinerCerclePlein);

        jMenuBar1.add(jMenuDessiner);

        jMenuFourier.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/CP 51_p1.jpg")));
        jMenuFourier.setText("Fourier");
        jMenuFourierAfficher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/CP 51_p3.jpg")));
        jMenuFourierAfficher.setText("Afficher");
        jMenuItemFourierAfficherModule.setText("Module");
        jMenuItemFourierAfficherModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherModuleActionPerformed(evt);
            }
        });

        jMenuFourierAfficher.add(jMenuItemFourierAfficherModule);

        jMenuItemFourierAfficherPhase.setText("Phase");
        jMenuItemFourierAfficherPhase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPhaseActionPerformed(evt);
            }
        });

        jMenuFourierAfficher.add(jMenuItemFourierAfficherPhase);

        jMenuItemFourierAfficherPartieReelle.setText("Partie Reelle");
        jMenuItemFourierAfficherPartieReelle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPartieReelleActionPerformed(evt);
            }
        });

        jMenuFourierAfficher.add(jMenuItemFourierAfficherPartieReelle);

        jMenuItemFourierAfficherPartieImaginaire.setText("Partie Imaginaire");
        jMenuItemFourierAfficherPartieImaginaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPartieImaginaireActionPerformed(evt);
            }
        });

        jMenuFourierAfficher.add(jMenuItemFourierAfficherPartieImaginaire);

        jMenuFourier.add(jMenuFourierAfficher);

        jMenuBar1.add(jMenuFourier);

        jMenuHistogramme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/report_48_hot.jpg")));
        jMenuHistogramme.setText("Histogramme");
        jMenuHistogrammeAfficher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/report_32_hot.jpg")));
        jMenuHistogrammeAfficher.setText("Afficher");
        jMenuHistogrammeAfficher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeAfficherActionPerformed(evt);
            }
        });

        jMenuHistogrammeParametres.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/report_32_hot.jpg")));
        jMenuHistogrammeParametres.setText("Parametres");
        jMenuHistogrammeParametres.addActionListener(this::jMenuHistogrammeParametresActionPerformed);
        
        jMenuHistogrammeRehaussementLineaireSaturation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/report_32_hot.jpg")));
        jMenuHistogrammeRehaussementLineaireSaturation.setText("Rehaussement Saturation Lineaire");
        jMenuHistogrammeRehaussementLineaireSaturation.addActionListener(this::jMenuHistogrammeRehaussementLineaireSaturationActionPerformed);
        
        jMenuHistogrammeRehaussementGamma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/report_32_hot.jpg")));
        jMenuHistogrammeRehaussementGamma.setText("Rehaussement Gamma");
        jMenuHistogrammeRehaussementGamma.addActionListener(this::jMenuHistogrammeRehaussementGammaActionPerformed);
        
        jMenuHistogrammeRehaussementNegatif.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/report_32_hot.jpg")));
        jMenuHistogrammeRehaussementNegatif.setText("Rehaussement Negatif");
        jMenuHistogrammeRehaussementNegatif.addActionListener(this::jMenuHistogrammeRehaussementNegatifActionPerformed);
        
        jMenuHistogrammeRehaussementEgalisation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/report_32_hot.jpg")));
        jMenuHistogrammeRehaussementEgalisation.setText("Rehaussement Egalisation");
        jMenuHistogrammeRehaussementEgalisation.addActionListener(this::jMenuHistogrammeRehaussementEgalisationActionPerformed);
        
        jMenuHistogramme.add(jMenuHistogrammeAfficher);
        jMenuHistogramme.add(jMenuHistogrammeParametres);
        jMenuHistogramme.add(jMenuHistogrammeParametres);
        jMenuHistogramme.add(jMenuHistogrammeRehaussementLineaireSaturation);
        jMenuHistogramme.add(jMenuHistogrammeRehaussementGamma);
        jMenuHistogramme.add(jMenuHistogrammeRehaussementNegatif);
        jMenuHistogramme.add(jMenuHistogrammeRehaussementEgalisation);

        jMenuBar1.add(jMenuHistogramme);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .addContainerGap())
        );
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-500)/2, (screenSize.height-400)/2, 500, 400);


    }// </editor-fold>//GEN-END:initComponents

    private void jMenuHistogrammeRehaussementEgalisationActionPerformed(ActionEvent actionEvent) {
        try {
            var dialog = new JDialogAfficheRehaussementEgalisation(this,true, imageNG.getMatrice(),"Rehaussement Egalise");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuHistogrammeRehaussementNegatifActionPerformed(ActionEvent actionEvent) {
        try {
            var dialog = new JDialogAfficheRehaussementNegatif(this,true, imageNG.getMatrice(),"Rehaussement Negatif");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuHistogrammeRehaussementGammaActionPerformed(ActionEvent actionEvent) {
        try {
            var dialog = new JDialogAfficheRehaussementGamma(this,true, imageNG.getMatrice(),"Rehaussement Gamma");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuHistogrammeRehaussementLineaireSaturationActionPerformed(ActionEvent actionEvent) {
        try {
            var dialog = new JDialogAfficheRehaussementLineaireSaturation(this,true, imageNG.getMatrice(),"Rehaussement Lineaire");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuHistogrammeAfficherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHistogrammeAfficherActionPerformed
        int histo[];
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            histo = Histogramme.Histogramme256(f_int);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
            return;
        }
        
        // Cr�ation du dataset
        XYSeries serie = new XYSeries("Histo");
        for(int i=0 ; i<256 ; i++) serie.add(i,histo[i]);
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(serie);
        
        // Creation du chart
        JFreeChart chart = ChartFactory.createHistogram("Histogramme","Niveaux de gris","Nombre de pixels",dataset,PlotOrientation.VERTICAL,false,false,false);

        XYPlot plot = (XYPlot)chart.getXYPlot();
        ValueAxis axeX = plot.getDomainAxis();
        axeX.setRange(0,255);
        plot.setDomainAxis(axeX);
        
        // creation d'une frame
        ChartFrame frame = new ChartFrame("Histogramme de l'image",chart);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_jMenuHistogrammeAfficherActionPerformed

    private void jMenuHistogrammeParametresActionPerformed(ActionEvent evt) {
        try {
            var dialog = new JDialogAfficheParametresHistogramme(this,true, imageNG.getMatrice(),"Parametres Histogramme");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void activeMenusNG()
    {
        jMenuDessiner.setEnabled(true);
        jMenuFourier.setEnabled(true);
        jMenuHistogramme.setEnabled(true);


        jMenuLineaire.setEnabled(true);
        jMenuNonLineaire.setEnabled(true);
        jMenuContour.setEnabled(true);
        jMenuSeuillage.setEnabled(true);
    }
    
    private void activeMenusRGB()
    {
        jMenuDessiner.setEnabled(true);
        jMenuFourier.setEnabled(false);
        jMenuHistogramme.setEnabled(false);
    }
    
    private void jCheckBoxMenuItemDessinerCerclePleinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerCerclePleinActionPerformed
        if (!jCheckBoxMenuItemDessinerCerclePlein.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(true);
            observer.setMode(JLabelBeanCImage.SELECT_CERCLE_FILL);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerCerclePleinActionPerformed

    private void jCheckBoxMenuItemDessinerCercleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerCercleActionPerformed
        if (!jCheckBoxMenuItemDessinerCercle.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(true);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_CERCLE);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerCercleActionPerformed

    private void jMenuItemFourierAfficherPartieImaginaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for(int i=0 ; i<imageNG.getLargeur() ; i++)
                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
            
            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double partieImaginaire[][] = fourier.getPartieImaginaire();
            
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,partieImaginaire,"Fourier : Affichage de la partie imaginaire");
            dialog.setVisible(true);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed

    private void jMenuItemFourierAfficherPartieReelleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieReelleActionPerformed
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for(int i=0 ; i<imageNG.getLargeur() ; i++)
                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
            
            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double partieReelle[][] = fourier.getPartieReelle();
            
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,partieReelle,"Fourier : Affichage de la partie reelle");
            dialog.setVisible(true);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_jMenuItemFourierAfficherPartieReelleActionPerformed

    private void jMenuItemFourierAfficherPhaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPhaseActionPerformed
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for(int i=0 ; i<imageNG.getLargeur() ; i++)
                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
            
            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double phase[][] = fourier.getPhase();
            
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,phase,"Fourier : Affichage de la phase");
            dialog.setVisible(true);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_jMenuItemFourierAfficherPhaseActionPerformed

    private void jMenuItemFourierAfficherModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherModuleActionPerformed
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for(int i=0 ; i<imageNG.getLargeur() ; i++)
                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
            
            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double module[][] = fourier.getModule();
            
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,module,"Fourier : Affichage du module");
            dialog.setVisible(true);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFourierAfficherModuleActionPerformed

    private void jCheckBoxMenuItemDessinerPixelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerPixelActionPerformed
        if (!jCheckBoxMenuItemDessinerPixel.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(true);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.CLIC);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerPixelActionPerformed

    private void jMenuItemEnregistrerSousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEnregistrerSousActionPerformed
        JFileChooser choix = new JFileChooser();
	File fichier;
			
	choix.setCurrentDirectory(new File ("."));
	if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
	{
            fichier = choix.getSelectedFile();
            if (fichier != null)
            {
                try 
                {
                    if (imageRGB != null) imageRGB.enregistreFormatPNG(fichier);
                    if (imageNG != null) imageNG.enregistreFormatPNG(fichier);
                } 
                catch (IOException ex) 
                {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
	}
    }//GEN-LAST:event_jMenuItemEnregistrerSousActionPerformed

    private void jMenuItemOuvrirNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvrirNGActionPerformed
        JFileChooser choix = new JFileChooser();
	File fichier;
			
	choix.setCurrentDirectory(new File ("./src/main/resources"));
	if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
	{
            fichier = choix.getSelectedFile();
            if (fichier != null)
            {
                try 
                {
                    imageNG = new CImageNG(fichier);
                    observer.setCImage(imageNG);
                    imageRGB = null;
                    activeMenusNG();
                } 
                catch (IOException ex) 
                {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
	}
    }//GEN-LAST:event_jMenuItemOuvrirNGActionPerformed

    private void jMenuItemNouvelleNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNouvelleNGActionPerformed
        JDialogNouvelleCImageNG dialog = new JDialogNouvelleCImageNG(this,true);
        dialog.setVisible(true);
        imageNG = dialog.getCImageNG();
        observer.setCImage(imageNG);
        imageRGB = null;
        activeMenusNG();
    }//GEN-LAST:event_jMenuItemNouvelleNGActionPerformed

    private void jMenuItemCouleurPinceauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCouleurPinceauActionPerformed
        if (imageRGB != null)
        {
            Color newC = JColorChooser.showDialog(this,"Couleur du pinceau",couleurPinceauRGB);
            if (newC != null) couleurPinceauRGB = newC;
            observer.setCouleurPinceau(couleurPinceauRGB);
        }
        
        if (imageNG != null)
        {
            JDialogChoixCouleurNG dialog = new JDialogChoixCouleurNG(this,true,couleurPinceauNG);
            dialog.setVisible(true);
            couleurPinceauNG = dialog.getCouleur();
        }
    }//GEN-LAST:event_jMenuItemCouleurPinceauActionPerformed

    private void jCheckBoxMenuItemDessinerRectanglePleinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerRectanglePleinActionPerformed
        if (!jCheckBoxMenuItemDessinerRectanglePlein.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(true);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_RECT_FILL);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerRectanglePleinActionPerformed

    private void jCheckBoxMenuItemDessinerRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerRectangleActionPerformed
        if (!jCheckBoxMenuItemDessinerRectangle.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(true);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_RECT);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerRectangleActionPerformed

    private void jCheckBoxMenuItemDessinerLigneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerLigneActionPerformed
        if (!jCheckBoxMenuItemDessinerLigne.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(true);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_LIGNE);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerLigneActionPerformed

    private void jMenuItemNouvelleRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNouvelleRGBActionPerformed
        JDialogNouvelleCImageRGB dialog = new JDialogNouvelleCImageRGB(this,true);
        dialog.setVisible(true);
        imageRGB = dialog.getCImageRGB();
        observer.setCImage(imageRGB);
        imageNG = null;
        activeMenusRGB();
    }//GEN-LAST:event_jMenuItemNouvelleRGBActionPerformed

    private void jMenuQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuQuitterActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuQuitterActionPerformed

    private void jMenuItemOuvrirRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvrirRGBActionPerformed
        JFileChooser choix = new JFileChooser();
	File fichier;
			
	choix.setCurrentDirectory(new File ("./src/main/resources"));
	if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
	{
            fichier = choix.getSelectedFile();
            if (fichier != null)
            {
                try 
                {
                    imageRGB = new CImageRGB(fichier);
                    observer.setCImage(imageRGB);
                    imageNG = null;
                    activeMenusRGB();
                } 
                catch (IOException ex) 
                {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
	}
    }//GEN-LAST:event_jMenuItemOuvrirRGBActionPerformed
    
    /* Filtre Linéaire Global */
    private void jMenuItemPBIGlobalActionPerformed(ActionEvent evt){
        try
        {
            JDialogAffichePBIGlobal dialog = new JDialogAffichePBIGlobal(this,true, imageNG.getMatrice(),"Lineaire Global : Passe-bas Ideal");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuItemPHIGlobalActionPerformed(ActionEvent evt){
        try
        {
            JDialogAffichePHIGlobal dialog = new JDialogAffichePHIGlobal(this,true, imageNG.getMatrice(),"Lineaire Global : Passe-haut Ideal");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuItemPBBWGlobalActionPerformed(ActionEvent evt){
        try
        {
            JDialogAffichePBBWGlobal dialog = new JDialogAffichePBBWGlobal(this,true, imageNG.getMatrice(),"Lineaire Global : Passe-bas Butterworth");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuItemPHBWGlobalActionPerformed(ActionEvent evt){
        try
        {
            JDialogAffichePHBWGlobal dialog = new JDialogAffichePHBWGlobal(this,true, imageNG.getMatrice(),"Lineaire Global : Passe-haut Butterworth");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    /* Filtre Linéaire Local */
    private void jMenuItemMCLocalActionPerformed(ActionEvent evt){
        try
        {
            JDialogAfficheMCLocal dialog = new JDialogAfficheMCLocal(this,true, imageNG.getMatrice(),"Lineaire Local : Masque de convolution");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuItemMYLocalActionPerformed(ActionEvent evt){
        try
        {
            JDialogAfficheMYLocal dialog = new JDialogAfficheMYLocal(this,true, imageNG.getMatrice(),"Lineaire Local : Filtre Moyenneur");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }
    
      private void jMenuItemErosionActionPerformed(ActionEvent evt){
        try
        {
            JDialogAfficheErosion dialog = new JDialogAfficheErosion(this,true, imageNG.getMatrice(),"Non-Lineaire Elementaire : Erosion");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }
    
    private void jMenuItemDilatationActionPerformed(ActionEvent evt){
        try
        {
            JDialogAfficheDilatation dialog = new JDialogAfficheDilatation(this,true, imageNG.getMatrice(),"Non-Lineaire Elementaire : Dilatation");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }
    
    private void jMenuItemOuvertureActionPerformed(ActionEvent evt){
        try
        {
            JDialogAfficheOuverture dialog = new JDialogAfficheOuverture(this,true, imageNG.getMatrice(),"Non-Lineaire Elementaire : Ouverture");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }
    
    private void jMenuItemFermetureActionPerformed(ActionEvent evt){
        try
        {
            JDialogAfficheFermeture dialog = new JDialogAfficheFermeture(this,true, imageNG.getMatrice(),"Non-Lineaire Elementaire : Fermeture");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }
    
    private void jMenuItemDilatationGeodesiqueActionPerformed(ActionEvent evt){
        try
        {
            JDialogDilatationGeodesique dialog = new JDialogDilatationGeodesique(this,true, imageNG.getMatrice(),"Non-Lineaire Complexe : Dilatation Geodesique");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }  
    
    private void jMenuItemReconstructionGeodesiqueActionPerformed(ActionEvent evt){
        try
        {
            JDialogReconstructionGeodesique dialog = new JDialogReconstructionGeodesique(this,true, imageNG.getMatrice(),"Non-Lineaire Complexe : Reconstruction Geodesique");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }
    
    private void jMenuItemFiltreMedianActionPerformed(ActionEvent evt){
        try
        {
            JDialogFiltreMedian dialog = new JDialogFiltreMedian(this,true, imageNG.getMatrice(),"Non-Lineaire Complexe : Filtre Median");
             dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuItemPrewitt(ActionEvent evt){
        try
        {
            JDialogAffichePrewitt dialog = new JDialogAffichePrewitt(this,true, imageNG.getMatrice(),"Contours Lineaire: Filtre Prewitt");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuItemSobel(ActionEvent evt){
        try
        {
            JDialogAfficheSobel dialog = new JDialogAfficheSobel(this,true, imageNG.getMatrice(),"Contours Lineaire: Filtre Sobel");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuItemLaplace4(ActionEvent evt){
        try
        {
            JDialogAfficheLaplace4 dialog = new JDialogAfficheLaplace4(this,true, imageNG.getMatrice(),"Contours Lineaire: Laplace 4");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuItemLaplace8(ActionEvent evt){
        try
        {
            JDialogAfficheLaplace8 dialog = new JDialogAfficheLaplace8(this,true, imageNG.getMatrice(),"Contours Lineaire: Laplace 8");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuItemGradErosion(ActionEvent evt){
        try
        {
            JDialogAfficheGradErosion dialog = new JDialogAfficheGradErosion(this,true, imageNG.getMatrice(),"Contours Non-Lineaire: Gradient Erosion");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuItemGradDilatation(ActionEvent evt){
        try
        {
            JDialogAfficheGradDilatation dialog = new JDialogAfficheGradDilatation(this,true, imageNG.getMatrice(),"Contours Non-Lineaire: Gradient Dilatation");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuItemGradBeucher(ActionEvent evt){
        try
        {
            JDialogAfficheGradBeucher dialog = new JDialogAfficheGradBeucher(this,true, imageNG.getMatrice(),"Contours Non-Lineaire: Gradient Beucher");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuItemLaplaceNonLin(ActionEvent evt){
        try
        {
            JDialogAfficheLaplaceNonLin dialog = new JDialogAfficheLaplaceNonLin(this,true, imageNG.getMatrice(),"Contours Non-Lineaire: Laplace Non Lineaire");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuItemSeuiSimple(ActionEvent evt){
        try
        {
            JDialogAfficheSeuilSimple dialog = new JDialogAfficheSeuilSimple(this,true, imageNG.getMatrice(),"Seuillage : Simple");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuItemSeuiDouble(ActionEvent evt){
        try
        {
            JDialogAfficheSeuilDouble dialog = new JDialogAfficheSeuilDouble(this,true, imageNG.getMatrice(),"Seuillage : Double");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuItemSeuiAuto(ActionEvent evt){
        try
        {
            JDialogAfficheSeuilAuto dialog = new JDialogAfficheSeuilAuto(this,true, imageNG.getMatrice(),"Seuillage : Automatique");
            dialog.setVisible(true);
        }
        catch (CImageNGException ex)
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }

    private void jMenuItemLenaBruit(ActionEvent evt){
        JDialogLenaBruit dialog = new JDialogLenaBruit(this,true,"Applications : Lena Bruit");
        dialog.setVisible(true);
    }

    private void jMenuItemLenaAEgaliser(ActionEvent evt){
        JDialogLenaAEgaliser dialog = new JDialogLenaAEgaliser(this,true,"Applications : Lena a egaliser");
        dialog.setVisible(true);
    }

    private void jMenuItemPetitsPois(ActionEvent evt){
        JDialogPetitsPois dialog = new JDialogPetitsPois(this,true,"Applications : Petits pois");
        dialog.setVisible(true);
    }

    private void jMenuItemBalanes(ActionEvent evt){
        JDialogBalanes dialog = new JDialogBalanes(this,true,"Applications : Balanes");
        dialog.setVisible(true);
    }

    private void jMenuItemTools(ActionEvent evt){
        JDialogTools dialog = new JDialogTools(this,true,"Applications : Tools");
        dialog.setVisible(true);
    }

    private void jMenuItemVaisseaux(ActionEvent evt){
        JDialogVaisseaux dialog = new JDialogVaisseaux(this,true,"Applications : Vaisseaux");
        dialog.setVisible(true);
    }

    private void jMenuItemTartines(ActionEvent evt){
        JDialogTartines dialog = new JDialogTartines(this,true,"Applications : Tartines");
        dialog.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IsilImageProcessing().setVisible(true);
            }
        });
    }

    public void ClicDetected(UnClicEvent e) 
    {
        if (jCheckBoxMenuItemDessinerPixel.isSelected())
        {   
            try 
            {
                if (imageRGB != null) 
                    imageRGB.setPixel(e.getX(),e.getY(),couleurPinceauRGB);
                if (imageNG != null) 
                    imageNG.setPixel(e.getX(),e.getY(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectLigneDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerLigne.isSelected())
        {   
            try 
            {
                if (imageRGB != null) 
                    imageRGB.DessineLigne(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null) 
                    imageNG.DessineLigne(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectRectDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerRectangle.isSelected())
        {   
            try 
            {
                if (imageRGB != null)
                    imageRGB.DessineRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.DessineRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectCercleDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerCercle.isSelected())
        {   
            try 
            {
                if (imageRGB != null)
                    imageRGB.DessineCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.DessineCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectCercleFillDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerCerclePlein.isSelected())
        {   
            try 
            {
                if (imageRGB != null)
                    imageRGB.RemplitCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.RemplitCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectRectFillDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerRectanglePlein.isSelected())
        {   
            try 
            {
                if (imageRGB != null) 
                    imageRGB.RemplitRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null) 
                    imageNG.RemplitRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupDessiner;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerCercle;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerCerclePlein;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerLigne;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerPixel;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerRectangle;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerRectanglePlein;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuDessiner;
    private javax.swing.JMenu jMenuFourier;
    private javax.swing.JMenu jMenuFourierAfficher;
    private javax.swing.JMenu jMenuHistogramme;
    private javax.swing.JMenuItem jMenuHistogrammeAfficher;
    private JMenuItem jMenuHistogrammeParametres;
    private JMenuItem jMenuHistogrammeRehaussementLineaireSaturation;
    private JMenuItem jMenuHistogrammeRehaussementGamma;
    private JMenuItem jMenuHistogrammeRehaussementNegatif;
    private JMenuItem jMenuHistogrammeRehaussementEgalisation;
    private javax.swing.JMenu jMenuImage;
    private javax.swing.JMenuItem jMenuItemCouleurPinceau;
    private javax.swing.JMenuItem jMenuItemEnregistrerSous;
    private javax.swing.JMenuItem jMenuItemFourierAfficherModule;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPartieImaginaire;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPartieReelle;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPhase;
    private javax.swing.JMenuItem jMenuItemNouvelleNG;
    private javax.swing.JMenuItem jMenuItemNouvelleRGB;
    private javax.swing.JMenuItem jMenuItemOuvrirNG;
    private javax.swing.JMenuItem jMenuItemOuvrirRGB;
    private javax.swing.JMenu jMenuNouvelle;
    private javax.swing.JMenu jMenuOuvrir;
    private javax.swing.JMenuItem jMenuQuitter;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables

    /* Filtre Linéaire Global */
    private javax.swing.JMenu jMenuLineaire;
    private javax.swing.JMenu jMenuGlobal;
    private javax.swing.JMenuItem jMenuItemPBIGlobal;
    private javax.swing.JMenuItem jMenuItemPHIGlobal;
    private javax.swing.JMenuItem jMenuItemPBBWGlobal;
    private javax.swing.JMenuItem jMenuItemPHBWGlobal;

    /* Filtre Linéaire Local */
    private javax.swing.JMenu jMenuLocal;
    private javax.swing.JMenuItem jMenuItemMCLocal;
    private javax.swing.JMenuItem jMenuItemMYLocal;

    // NON-LINEAR
    private javax.swing.JMenu jMenuNonLineaire;
    private javax.swing.JMenu jMenuElementaire;
    private javax.swing.JMenu jMenuComplexe;
    private javax.swing.JMenuItem jMenuItemErosion;
    private javax.swing.JMenuItem jMenuItemDilatation;
    private javax.swing.JMenuItem jMenuItemOuverture;
    private javax.swing.JMenuItem jMenuItemFermeture;
    private javax.swing.JMenuItem jMenuItemDilatationGeodesique;
    private javax.swing.JMenuItem jMenuItemReconstructionGeodesique;
    private javax.swing.JMenuItem jMenuItemFiltreMedian;

    // Contours linéaires
    private javax.swing.JMenu jMenuContour;
    private javax.swing.JMenu jMenuContourLineaire;
    private javax.swing.JMenu jMenuContourNonLineaire;
    private javax.swing.JMenuItem jMenuItemPrewitt;
    private javax.swing.JMenuItem jMenuItemSobel;
    private javax.swing.JMenuItem jMenuItemLaplace4;
    private javax.swing.JMenuItem jMenuItemLaplace8;
    private javax.swing.JMenuItem jMenuItemGradErosion;
    private javax.swing.JMenuItem jMenuItemGradDilatation;
    private javax.swing.JMenuItem jMenuItemGradBeucher;
    private javax.swing.JMenuItem jMenuItemLaplaceNonLin;

    // Seuillage
    private javax.swing.JMenu jMenuSeuillage;
    private javax.swing.JMenuItem jMenuItemSeuiSimple;
    private javax.swing.JMenuItem jMenuItemSeuiDouble;
    private javax.swing.JMenuItem jMenuItemSeuiAuto;

    // Applications
    private javax.swing.JMenu jMenuApplications;
    private javax.swing.JMenuItem jMenuItemLenaBruit;
    private javax.swing.JMenuItem jMenuItemLenaAEgaliser;
    private javax.swing.JMenuItem jMenuItemPetitsPois;
    private javax.swing.JMenuItem jMenuItemBalanes;
    private javax.swing.JMenuItem jMenuItemTools;
    private javax.swing.JMenuItem jMenuItemVaisseaux;
    private javax.swing.JMenuItem jMenuItemTartines;
}
